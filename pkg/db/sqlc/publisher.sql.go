// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: publisher.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPublisher = `-- name: CreatePublisher :one
INSERT INTO publisher (name, url)
VALUES ($1, $2)
RETURNING id, name, url
`

type CreatePublisherParams struct {
	Name string
	Url  string
}

// Insert a new publisher
func (q *Queries) CreatePublisher(ctx context.Context, arg CreatePublisherParams) (Publisher, error) {
	row := q.db.QueryRow(ctx, createPublisher, arg.Name, arg.Url)
	var i Publisher
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const deletePublisher = `-- name: DeletePublisher :exec
DELETE
FROM publisher
WHERE id = $1
`

// Delete publisher by ID
func (q *Queries) DeletePublisher(ctx context.Context, id pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deletePublisher, id)
	return err
}

const getPublisherByName = `-- name: GetPublisherByName :one
SELECT id, name, url
FROM publisher
WHERE name = $1
LIMIT 1
`

// Get publisher by its name
func (q *Queries) GetPublisherByName(ctx context.Context, name pgtype.Text) (Publisher, error) {
	row := q.db.QueryRow(ctx, getPublisherByName, name)
	var i Publisher
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}

const updatePublisherUrl = `-- name: UpdatePublisherUrl :one
UPDATE publisher
SET url = $1
WHERE id = $2
RETURNING id, name, url
`

type UpdatePublisherUrlParams struct {
	Url pgtype.Text
	ID  pgtype.Int4
}

// Update publisher URL by ID
func (q *Queries) UpdatePublisherUrl(ctx context.Context, arg UpdatePublisherUrlParams) (Publisher, error) {
	row := q.db.QueryRow(ctx, updatePublisherUrl, arg.Url, arg.ID)
	var i Publisher
	err := row.Scan(&i.ID, &i.Name, &i.Url)
	return i, err
}
