// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (tg_id, role, watchlist_period)
VALUES ($1, $2, $3)
RETURNING tg_id, role, watchlist_period
`

type CreateUserParams struct {
	TgID            string       `json:"tg_id"`
	Role            NullUserRole `json:"role"`
	WatchlistPeriod *int32       `json:"watchlist_period"`
}

// Create a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.TgID, arg.Role, arg.WatchlistPeriod)
	var i User
	err := row.Scan(&i.TgID, &i.Role, &i.WatchlistPeriod)
	return i, err
}

const createUserAd = `-- name: CreateUserAd :exec
INSERT INTO user_ads (user_id, ad_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type CreateUserAdParams struct {
	UserID string `json:"user_id"`
	AdID   int64  `json:"ad_id"`
}

// Assign an ad to a user as creator of that ad
func (q *Queries) CreateUserAd(ctx context.Context, arg CreateUserAdParams) error {
	_, err := q.db.Exec(ctx, createUserAd, arg.UserID, arg.AdID)
	return err
}

const createUserFavoriteAd = `-- name: CreateUserFavoriteAd :exec
INSERT INTO favorite_ads (user_id, ad_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type CreateUserFavoriteAdParams struct {
	UserID string `json:"user_id"`
	AdID   int64  `json:"ad_id"`
}

// Assign an ad to a user as creator of that ad
func (q *Queries) CreateUserFavoriteAd(ctx context.Context, arg CreateUserFavoriteAdParams) error {
	_, err := q.db.Exec(ctx, createUserFavoriteAd, arg.UserID, arg.AdID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE tg_id = $1
`

// Delete a user by Telegram ID
func (q *Queries) DeleteUser(ctx context.Context, tgID string) error {
	_, err := q.db.Exec(ctx, deleteUser, tgID)
	return err
}

const deleteUserFavoriteAd = `-- name: DeleteUserFavoriteAd :exec
DELETE
FROM favorite_ads
WHERE user_id = $1
  AND ad_id = $2
`

type DeleteUserFavoriteAdParams struct {
	UserID string `json:"user_id"`
	AdID   int64  `json:"ad_id"`
}

// Delete an ad from user's favorite list
func (q *Queries) DeleteUserFavoriteAd(ctx context.Context, arg DeleteUserFavoriteAdParams) error {
	_, err := q.db.Exec(ctx, deleteUserFavoriteAd, arg.UserID, arg.AdID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT tg_id, role, watchlist_period
FROM "user"
ORDER BY tg_id
LIMIT $2 OFFSET $1
`

type GetAllUsersParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

// Get all users with pagination
func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.TgID, &i.Role, &i.WatchlistPeriod); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAds = `-- name: GetUserAds :many

SELECT ad_id
FROM user_ads
WHERE user_id = $1
`

// Avoid duplicate entries
// Get any ad that's created by user
func (q *Queries) GetUserAds(ctx context.Context, userID string) ([]int64, error) {
	rows, err := q.db.Query(ctx, getUserAds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var ad_id int64
		if err := rows.Scan(&ad_id); err != nil {
			return nil, err
		}
		items = append(items, ad_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByTGID = `-- name: GetUserByTGID :one
SELECT tg_id, role, watchlist_period
FROM "user"
WHERE tg_id = $1
LIMIT 1
`

// Get user by Telegram ID
func (q *Queries) GetUserByTGID(ctx context.Context, tgID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByTGID, tgID)
	var i User
	err := row.Scan(&i.TgID, &i.Role, &i.WatchlistPeriod)
	return i, err
}

const getUserFavoriteAds = `-- name: GetUserFavoriteAds :many

SELECT ad_id
FROM favorite_ads
WHERE user_id = $1
`

// Avoid duplicate entries
// Get all user's favorite ads
func (q *Queries) GetUserFavoriteAds(ctx context.Context, userID string) ([]int64, error) {
	rows, err := q.db.Query(ctx, getUserFavoriteAds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var ad_id int64
		if err := rows.Scan(&ad_id); err != nil {
			return nil, err
		}
		items = append(items, ad_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPeriod = `-- name: UpdateUserPeriod :one
UPDATE "user"
SET watchlist_period = $1
WHERE tg_id = $2
RETURNING tg_id, role, watchlist_period
`

type UpdateUserPeriodParams struct {
	WatchlistPeriod *int32 `json:"watchlist_period"`
	TgID            string `json:"tg_id"`
}

// Update user role and watchlist period
func (q *Queries) UpdateUserPeriod(ctx context.Context, arg UpdateUserPeriodParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPeriod, arg.WatchlistPeriod, arg.TgID)
	var i User
	err := row.Scan(&i.TgID, &i.Role, &i.WatchlistPeriod)
	return i, err
}
